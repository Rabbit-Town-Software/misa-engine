package misa.data.tiled2misa;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Parses TMX files generated by the Tiled map editor to create a TiledMap object.
 * Responsible for extracting map attributes, tilesets, layers, and object layers.
 */
@SuppressWarnings("unused")
public class TiledParser
{
    private static final Logger LOGGER = Logger.getLogger(TiledParser.class.getName());
    private String resourceBasePath = ""; // Base directory for relative resources.

    /**
     * Sets the base path for resources such as tilesets and images.
     * Ensures the path ends with a slash.
     *
     * @param basePath The base directory for resources.
     */
    public void setResourceBasePath(String basePath)
    {
        if (!basePath.endsWith("/"))
        {
            basePath += "/";
        }
        this.resourceBasePath = basePath;
    }

    /**
     * Loads a TiledMap from a TMX file.
     * Parses the TMX file into a TiledMap object containing all layers, tilesets, and objects.
     *
     * @param filePath The path to the TMX file.
     * @return A TiledMap object representing the parsed TMX file, or null if parsing fails.
     */
    public TiledMap loadFromTMX(String filePath)
    {
        try
        {
            File xmlFile = new File(filePath);
            Document document = parseXMLFile(xmlFile);
            return createTiledMapFromDocument(document);
        }
        catch (Exception e)
        {
            LOGGER.severe("Failed to load map from TMX file: " + filePath);
            return null;
        }
    }

    /**
     * Loads a TiledMap from an InputStream.
     * Parses the InputStream into a TiledMap object.
     *
     * @param inputStream The InputStream containing TMX data.
     * @return A TiledMap object representing the parsed TMX data, or null if parsing fails.
     */
    public TiledMap loadFromInputStream(InputStream inputStream)
    {
        try
        {
            Document document = parseXMLStream(inputStream);
            LOGGER.info("Successfully parsed TMX data from InputStream.");
            return createTiledMapFromDocument(document);
        }
        catch (Exception e)
        {
            LOGGER.log(Level.SEVERE, "Failed to load map from InputStream.", e);
            return null;
        }
    }

    /**
     * Parses an XML file into a Document object.
     *
     * @param file The XML file to parse.
     * @return The parsed Document object.
     * @throws Exception If parsing fails.
     */
    private Document parseXMLFile(File file) throws Exception
    {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(file);
        document.getDocumentElement().normalize();
        return document;
    }

    /**
     * Parses an InputStream into a Document object.
     *
     * @param inputStream The InputStream containing XML data.
     * @return The parsed Document object.
     * @throws Exception If parsing fails.
     */
    private Document parseXMLStream(InputStream inputStream) throws Exception
    {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(inputStream);
        document.getDocumentElement().normalize();
        LOGGER.info("XML parsing completed successfully.");
        return document;
    }

    /**
     * Creates a TiledMap object from a parsed XML Document.
     * Extracts map attributes, tilesets, layers, and objects.
     *
     * @param document The parsed XML Document.
     * @return A constructed TiledMap object.
     */
    private TiledMap createTiledMapFromDocument(Document document)
    {
        Element mapElement = document.getDocumentElement();
        int mapWidth = getIntAttribute(mapElement, "width");
        int mapHeight = getIntAttribute(mapElement, "height");
        int tileWidth = getIntAttribute(mapElement, "tilewidth");
        int tileHeight = getIntAttribute(mapElement, "tileheight");

        List<TiledTileset> tilesets = parseTilesets(document);
        List<TiledLayer> layers = parseLayers(document);
        List<TiledObject> objects = parseObjectLayers(document);

        return new TiledMap.Builder()
                .setWidth(mapWidth)
                .setHeight(mapHeight)
                .setTileWidth(tileWidth)
                .setTileHeight(tileHeight)
                .setLayers(layers)
                .setTilesets(tilesets)
                .setObjects(objects)
                .build();
    }

    /**
     * Extracts an integer attribute from an XML element.
     * Logs a warning if the attribute is missing or invalid.
     *
     * @param element   The XML element containing the attribute.
     * @param attribute The name of the attribute.
     * @return The parsed integer value, or 0 if parsing fails.
     */
    private int getIntAttribute(Element element, String attribute)
    {
        try
        {
            return Integer.parseInt(element.getAttribute(attribute));
        }
        catch (NumberFormatException e)
        {
            LOGGER.warning("Invalid or missing integer attribute: " + attribute);
            return 0;
        }
    }

    /**
     * Parses all tilesets from the TMX document.
     * Extracts tileset attributes such as the image source and first global ID.
     *
     * @param document The TMX XML Document.
     * @return A list of TiledTileset objects.
     */
    private List<TiledTileset> parseTilesets(Document document)
    {
        List<TiledTileset> tilesets = new ArrayList<>();
        NodeList tilesetNodes = document.getElementsByTagName("tileset");

        for (int i = 0; i < tilesetNodes.getLength(); i++)
        {
            Element tilesetElement = (Element) tilesetNodes.item(i);
            String source = tilesetElement.getAttribute("source");
            int firstGID = getIntAttribute(tilesetElement, "firstgid");

            String tsxPath = resourceBasePath + source;
            String imagePath = extractImagePathFromTSX(tsxPath);

            if (imagePath != null)
            {
                tilesets.add(new TiledTileset(imagePath, firstGID));
                LOGGER.info("Loaded tileset: " + tsxPath + " with image: " + imagePath);
            }
        }
        return tilesets;
    }

    /**
     * Extracts the image path from a TSX file.
     *
     * @param tsxPath The path to the TSX file.
     * @return The image path, or null if parsing fails.
     */
    private String extractImagePathFromTSX(String tsxPath)
    {
        try (InputStream tsxStream = getClass().getClassLoader().getResourceAsStream(tsxPath))
        {
            if (tsxStream == null)
            {
                LOGGER.severe("TSX file not found: " + tsxPath);
                return null;
            }

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(tsxStream);

            Element imageElement = (Element) document.getElementsByTagName("image").item(0);
            return resourceBasePath + imageElement.getAttribute("source");
        }
        catch (Exception e)
        {
            LOGGER.log(Level.SEVERE, "Failed to parse TSX file: " + tsxPath, e);
            return null;
        }
    }

    /**
     * Parses all layers in the TMX document.
     * Extracts layer attributes and decodes tile data.
     *
     * @param document The TMX XML Document.
     * @return A list of TiledLayer objects.
     */
    private List<TiledLayer> parseLayers(Document document)
    {
        List<TiledLayer> layers = new ArrayList<>();
        NodeList layerNodes = document.getElementsByTagName("layer");

        for (int i = 0; i < layerNodes.getLength(); i++)
        {
            Element layerElement = (Element) layerNodes.item(i);
            String layerName = layerElement.getAttribute("name");
            int layerWidth = getIntAttribute(layerElement, "width");
            int layerHeight = getIntAttribute(layerElement, "height");

            LOGGER.info("Parsing layer: " + layerName);

            Element dataElement = (Element) layerElement.getElementsByTagName("data").item(0);
            String encoding = dataElement.getAttribute("encoding");
            long[][] tileData;

            try
            {
                if ("csv".equalsIgnoreCase(encoding))
                {
                    tileData = decodeCSVTileData(dataElement.getTextContent().trim(), layerWidth, layerHeight);
                }
                else if ("base64".equalsIgnoreCase(encoding))
                {
                    tileData = decodeBase64TileData(dataElement.getTextContent().trim(), layerWidth, layerHeight);
                }
                else
                {
                    LOGGER.warning("Unsupported encoding: " + encoding);
                    continue;
                }

                layers.add(new TiledLayer(layerName, layerWidth, layerHeight, tileData));
            }
            catch (Exception e)
            {
                LOGGER.log(Level.SEVERE, "Failed to parse layer: " + layerName, e);
            }
        }
        return layers;
    }

    /**
     * Decodes tile data encoded in CSV format.
     *
     * @param csvData The CSV data as a string.
     * @param width   The width of the layer in tiles.
     * @param height  The height of the layer in tiles.
     * @return A 2D array of tile IDs.
     */
    private long[][] decodeCSVTileData(String csvData, int width, int height)
    {
        long[][] tileData = new long[height][width];
        String[] tokens = csvData.split(",");

        for (int row = 0; row < height; row++)
        {
            for (int col = 0; col < width; col++)
            {
                int index = row * width + col;
                tileData[row][col] = Long.parseLong(tokens[index].trim());
            }
        }
        return tileData;
    }

    /**
     * Decodes tile data encoded in Base64 format.
     *
     * @param encodedData The Base64-encoded data as a string.
     * @param width       The width of the layer in tiles.
     * @param height      The height of the layer in tiles.
     * @return A 2D array of tile IDs.
     */
    private long[][] decodeBase64TileData(String encodedData, int width, int height)
    {
        byte[] decodedData = Base64.getDecoder().decode(encodedData);
        ByteBuffer buffer = ByteBuffer.wrap(decodedData);
        long[][] tileData = new long[height][width];

        for (int row = 0; row < height; row++)
        {
            for (int col = 0; col < width; col++)
            {
                tileData[row][col] = buffer.getInt() & 0xFFFFFFFFL;
            }
        }
        return tileData;
    }

    /**
     * Parses all object layers in the TMX document.
     * Extracts objects and their attributes.
     *
     * @param document The TMX XML Document.
     * @return A list of TiledObject objects.
     */
    private List<TiledObject> parseObjectLayers(Document document)
    {
        List<TiledObject> objects = new ArrayList<>();
        NodeList objectGroupNodes = document.getElementsByTagName("objectgroup");

        for (int i = 0; i < objectGroupNodes.getLength(); i++)
        {
            Element objectGroupElement = (Element) objectGroupNodes.item(i);
            NodeList objectNodes = objectGroupElement.getElementsByTagName("object");

            for (int j = 0; j < objectNodes.getLength(); j++)
            {
                Element objectElement = (Element) objectNodes.item(j);
                objects.add(parseObject(objectElement));
            }
        }
        return objects;
    }

    /**
     * Parses a single object element into a TiledObject.
     *
     * @param objectElement The XML element representing the object.
     * @return A TiledObject instance.
     */
    private TiledObject parseObject(Element objectElement)
    {
        int id = Integer.parseInt(objectElement.getAttribute("id"));
        String name = objectElement.hasAttribute("name") ? objectElement.getAttribute("name") : "Unnamed";
        String type = objectElement.hasAttribute("type") ? objectElement.getAttribute("type") : "Undefined";
        double x = Double.parseDouble(objectElement.getAttribute("x"));
        double y = Double.parseDouble(objectElement.getAttribute("y"));
        double width = objectElement.hasAttribute("width") ? Double.parseDouble(objectElement.getAttribute("width")) : 0;
        double height = objectElement.hasAttribute("height") ? Double.parseDouble(objectElement.getAttribute("height")) : 0;

        Map<String, String> properties = new HashMap<>();
        NodeList propertyNodes = objectElement.getElementsByTagName("property");
        for (int p = 0; p < propertyNodes.getLength(); p++)
        {
            Element propertyElement = (Element) propertyNodes.item(p);
            properties.put(propertyElement.getAttribute("name"), propertyElement.getAttribute("value"));
        }

        return new TiledObject(id, name, type, x, y, width, height, properties);
    }
}
